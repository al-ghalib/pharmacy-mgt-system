openapi: 3.0.3
info:
  title: DRF B2C Pharmacy API
  version: 0.0.0
paths:
  /api/cart/:
    get:
      operationId: cart_list
      tags:
      - cart
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
          description: ''
    post:
      operationId: cart_create
      tags:
      - cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Cart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Cart'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
  /api/cart-item/:
    get:
      operationId: cart_item_list
      tags:
      - cart-item
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
          description: ''
    post:
      operationId: cart_item_create
      tags:
      - cart-item
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItem'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
  /api/cart/{uid}/:
    get:
      operationId: cart_retrieve
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this cart.
        required: true
      tags:
      - cart
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    put:
      operationId: cart_update
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this cart.
        required: true
      tags:
      - cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Cart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Cart'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    patch:
      operationId: cart_partial_update
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this cart.
        required: true
      tags:
      - cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCart'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
    delete:
      operationId: cart_destroy
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this cart.
        required: true
      tags:
      - cart
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/categories/:
    get:
      operationId: categories_list
      tags:
      - categories
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
    post:
      operationId: categories_create
      tags:
      - categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/inventory/:
    get:
      operationId: inventory_list
      tags:
      - inventory
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'
          description: ''
    post:
      operationId: inventory_create
      tags:
      - inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Inventory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Inventory'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
          description: ''
  /api/inventory/{uid}/:
    get:
      operationId: inventory_retrieve
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - inventory
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
          description: ''
    put:
      operationId: inventory_update
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Inventory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Inventory'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
          description: ''
    patch:
      operationId: inventory_partial_update
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedInventory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedInventory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedInventory'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
          description: ''
    delete:
      operationId: inventory_destroy
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - inventory
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/medicines/:
    get:
      operationId: medicines_list
      tags:
      - medicines
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Medicine'
          description: ''
    post:
      operationId: medicines_create
      tags:
      - medicines
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Medicine'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Medicine'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Medicine'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medicine'
          description: ''
  /api/order/:
    get:
      operationId: order_list
      tags:
      - order
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: ''
    post:
      operationId: order_create
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/order-detail/:
    get:
      operationId: order_detail_list
      tags:
      - order-detail
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDetail'
          description: ''
    post:
      operationId: order_detail_create
      tags:
      - order-detail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderDetail'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
  /api/order/{uid}/:
    get:
      operationId: order_retrieve
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this order.
        required: true
      tags:
      - order
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: order_update
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this order.
        required: true
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    patch:
      operationId: order_partial_update
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this order.
        required: true
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    delete:
      operationId: order_destroy
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this order.
        required: true
      tags:
      - order
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/organization-user/:
    get:
      operationId: organization_user_list
      tags:
      - organization-user
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationUser'
          description: ''
    post:
      operationId: organization_user_create
      tags:
      - organization-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrganizationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrganizationUser'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
          description: ''
  /api/organization-user/{uid}/:
    get:
      operationId: organization_user_retrieve
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this organization user.
        required: true
      tags:
      - organization-user
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
          description: ''
    put:
      operationId: organization_user_update
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this organization user.
        required: true
      tags:
      - organization-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrganizationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrganizationUser'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
          description: ''
    patch:
      operationId: organization_user_partial_update
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this organization user.
        required: true
      tags:
      - organization-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrganizationUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrganizationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrganizationUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUser'
          description: ''
    delete:
      operationId: organization_user_destroy
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this organization user.
        required: true
      tags:
      - organization-user
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/organizations/:
    get:
      operationId: organizations_list
      tags:
      - organizations
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
          description: ''
    post:
      operationId: organizations_create
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Organization'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: ''
  /api/organizations/{uid}/:
    get:
      operationId: organizations_retrieve
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this organization.
        required: true
      tags:
      - organizations
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: ''
    put:
      operationId: organizations_update
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this organization.
        required: true
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Organization'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: ''
    patch:
      operationId: organizations_partial_update
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this organization.
        required: true
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrganization'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrganization'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrganization'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: ''
    delete:
      operationId: organizations_destroy
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this organization.
        required: true
      tags:
      - organizations
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/organizations/{uid}/delete/:
    delete:
      operationId: organizations_delete_destroy
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this organization.
        required: true
      tags:
      - organizations
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/user/:
    get:
      operationId: user_list
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: user_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/{uid}/:
    get:
      operationId: user_retrieve
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: user_update
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: user_partial_update
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: user_destroy
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/user/{uid}/delete/:
    delete:
      operationId: user_delete_destroy
      parameters:
      - in: path
        name: uid
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this user.
        required: true
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    BlankEnum:
      enum:
      - ''
    Cart:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
        user:
          type: string
          format: uuid
      required:
      - created_at
      - uid
      - updated_at
      - user
    CartItem:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        quantity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        price_per_item:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        cart:
          type: string
          format: uuid
        inventory:
          type: string
          format: uuid
      required:
      - cart
      - created_at
      - inventory
      - uid
      - updated_at
    Category:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
      required:
      - name
      - uid
    GenderEnum:
      enum:
      - male
      - female
      - other
      type: string
      description: |-
        * `male` - Male
        * `female` - Female
        * `other` - Other
    Inventory:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        medicine:
          type: string
          format: uuid
        category:
          type: string
          format: uuid
        stock:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        image:
          type: string
          format: uri
          nullable: true
        expiry_date:
          type: string
          format: date
      required:
      - category
      - expiry_date
      - medicine
      - price
      - uid
    Medicine:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        generic_name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        manufacturer:
          type: string
          maxLength: 255
      required:
      - generic_name
      - manufacturer
      - name
      - uid
    NullEnum:
      enum:
      - null
    Order:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        order_details:
          type: array
          items:
            $ref: '#/components/schemas/OrderDetail'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        total_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        is_paid:
          type: boolean
        payment_method:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/PaymentMethodEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        user:
          type: string
          format: uuid
      required:
      - created_at
      - order_details
      - uid
      - updated_at
      - user
    OrderDetail:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        quantity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        order:
          type: string
          format: uuid
        cart_item:
          type: string
          format: uuid
      required:
      - cart_item
      - created_at
      - order
      - uid
      - updated_at
    OrderStatusEnum:
      enum:
      - pending
      - confirmed
      - shipped
      - delivered
      - cancelled
      type: string
      description: |-
        * `pending` - Pending
        * `confirmed` - Confirmed
        * `shipped` - Shipped
        * `delivered` - Delivered
        * `cancelled` - Cancelled
    Organization:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        phone:
          type: string
          nullable: true
          maxLength: 15
        email:
          type: string
          format: email
          nullable: true
          maxLength: 254
        address:
          type: string
          nullable: true
        trade_licence:
          type: string
          nullable: true
          maxLength: 100
        details:
          type: string
          nullable: true
        branch:
          type: string
          nullable: true
          maxLength: 100
      required:
      - name
      - uid
    OrganizationUser:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        user:
          type: string
          format: uuid
        organization:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/RoleEnum'
        status:
          $ref: '#/components/schemas/StatusAabEnum'
        salary:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
      required:
      - organization
      - uid
      - user
    PatchedCart:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
        user:
          type: string
          format: uuid
    PatchedInventory:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        medicine:
          type: string
          format: uuid
        category:
          type: string
          format: uuid
        stock:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        image:
          type: string
          format: uri
          nullable: true
        expiry_date:
          type: string
          format: date
    PatchedOrder:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        order_details:
          type: array
          items:
            $ref: '#/components/schemas/OrderDetail'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        total_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        is_paid:
          type: boolean
        payment_method:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/PaymentMethodEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        user:
          type: string
          format: uuid
    PatchedOrganization:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        phone:
          type: string
          nullable: true
          maxLength: 15
        email:
          type: string
          format: email
          nullable: true
          maxLength: 254
        address:
          type: string
          nullable: true
        trade_licence:
          type: string
          nullable: true
          maxLength: 100
        details:
          type: string
          nullable: true
        branch:
          type: string
          nullable: true
          maxLength: 100
    PatchedOrganizationUser:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        user:
          type: string
          format: uuid
        organization:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/RoleEnum'
        status:
          $ref: '#/components/schemas/StatusAabEnum'
        salary:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
    PatchedUser:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          nullable: true
          maxLength: 100
        last_name:
          type: string
          nullable: true
          maxLength: 100
        phone:
          type: string
          nullable: true
          maxLength: 15
        address:
          type: string
          nullable: true
        gender:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GenderEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        image:
          type: string
          format: uri
          nullable: true
        status:
          $ref: '#/components/schemas/StatusAabEnum'
        organization:
          type: string
          format: uuid
          nullable: true
    PaymentMethodEnum:
      enum:
      - cash
      - card
      - online
      type: string
      description: |-
        * `cash` - Cash
        * `card` - Card
        * `online` - Online Payment
    RoleEnum:
      enum:
      - admin
      - sales
      - stock_updater
      type: string
      description: |-
        * `admin` - Admin
        * `sales` - Sales Associate
        * `stock_updater` - Stock Updater
    StatusAabEnum:
      enum:
      - active
      - inactive
      - removed
      type: string
      description: |-
        * `active` - Active
        * `inactive` - Inactive
        * `removed` - Removed
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        uid:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          nullable: true
          maxLength: 100
        last_name:
          type: string
          nullable: true
          maxLength: 100
        phone:
          type: string
          nullable: true
          maxLength: 15
        address:
          type: string
          nullable: true
        gender:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GenderEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        image:
          type: string
          format: uri
          nullable: true
        status:
          $ref: '#/components/schemas/StatusAabEnum'
        organization:
          type: string
          format: uuid
          nullable: true
      required:
      - email
      - uid
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
